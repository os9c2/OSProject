/*********************************************
 *  knn.c
 *  Sample KNN implementation
 *  COMP9417 Machine Learning and Data Mining
 *  UNSW Session 1, 2012
 *	Chengbin Wang z3313137

 *  leave one out crossvalidation implementation
*/


#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <math.h>
#include <string.h>
#include "knn.cuh"
#include "dataExtraction.h"

#define STRINGLENGTH 10000
#define FINALFEATURESNAMEFILE "final_features_name.txt"

int main()
{
	char cols1[100][100];
	//Global var
	struct Node *Sample;
	struct Node *Sample_test;
	//struct Node Validation;
	int Atttr_Num=0;
	int Atttr_Num_test=0;
	char *Atttr_Seq;
	char *Atttr_Seq_test;
	int Sample_Num=0;
	int Sample_Num_test=0;
	char *predict_attr_char[MAX_ATTRIBUTES];
	int predict_attr[MAX_ATTRIBUTES];
	FILE *fp_features;
	char delims[] = ",";
	char *res=NULL;
 	char ch[STRINGLENGTH],str[STRINGLENGTH];
	int predict_attr_count=0;
	FILE *fp1=NULL,*fp2=NULL,*fp3=NULL,*fp4=NULL;
	
	int i;

	Sample=(struct Node *)malloc(sizeof(struct Node)*MAX_SAMPLE);
	Sample_test=(struct Node *)malloc(sizeof(struct Node)*MAX_SAMPLE);
	Atttr_Seq=(char *)malloc(sizeof(char)*MAX_ATTRIBUTES);
	Atttr_Seq_test=(char *)malloc(sizeof(char)*MAX_ATTRIBUTES);
	for(i=0;i<MAX_ATTRIBUTES;i++)
		predict_attr_char[i]=(char *)malloc(sizeof(char)*STRINGLENGTH);	

	
	int correct = 0;
	Sample_Num = 0;
        Sample_Num_test=0;
	
	char* filename;
	char* filename_test;
	filename=(char *)malloc(sizeof(char)*30);
	filename_test=(char *)malloc(sizeof(char)*30);
	//int num_knn = 0;
	
	int k_value = 5;

	/* Initialize predict_attr array to -1 */
        for(i=0;i<MAX_ATTRIBUTES;i++)
	 predict_attr[i]=-1;
	
	
	filename="training_data.arff";
	filename_test="test_data.arff";

	printf("\n\n=======which attribute do you want to predict?========\n");
	printf("*Select from following:\n");
	
	Sample=readfile(filename,&Sample_Num,&Atttr_Num,Atttr_Seq);
	printf("\nhere");
	Sample_test=readfile(filename_test,&Sample_Num_test,&Atttr_Num_test,Atttr_Seq_test);
	printf("Sample Number = %d\n",Sample_Num_test);
	
	/* Begin - Reading selected features and passing it to predict_attr array */
        

	fp_features = fopen("final_features.txt","r");
	if(fp_features==NULL)
	{
		printf("UNABLE TO OPEN FILE\n");
		return 0;	
	}

	
	while(fgets(ch,sizeof(ch),fp_features))
	  {
		printf("In while 1\n");
	   i=0;
	   strcpy(str,ch);
	   res= NULL;
	   res = strtok(str, delims);
	    while(res != NULL ) {
		printf("In while 2\n");
	      	strcpy(predict_attr_char[i],res);
		printf("pac - %s ",predict_attr_char[i]);
		predict_attr[i]=atoi(predict_attr_char[i]);
		
	      res = strtok( NULL, delims );
	     i++;
	    }
	  }
  	fclose(fp_features);
	for(i=0;i<MAX_ATTRIBUTES;i++)	
		{
		  if(predict_attr[i]!=-1)
		   predict_attr_count++;
		}
        printf("Predict_attr_count = %d\n",predict_attr_count);



	printf("Predict_attr array is:\n");
	for(i=0;i<predict_attr_count;i++)
	 	printf("%d ",predict_attr[i]);
 	
	
        
	

        /* End - Reading selected features and passing it to predict_attr array */ 



/* Read from final_features_name.txt and write into data_coordinates.dat */
//char ch1[STRINGLENGTH],str1[STRINGLENGTH],*r=NULL;
FILE *fn = fopen(FINALFEATURESNAMEFILE,"r");
if(fn==NULL)
{
  printf("\nCould not open the file\n");
}


while(fgets(ch,sizeof(ch),fn))
  {
   i=0;
  printf("Parse cols1");
   strcpy(str,ch);
   res = NULL;
   res = strtok(str, delims);
    while(res != NULL ) {
      	strcpy(cols1[i],res);
      res = strtok( NULL, delims);
     i++;
    }
  }
  fclose(fn);
/* Read from final_features_name.txt and write into data_coordinates.dat */

	int num_knn[predict_attr_count];
	
	for(i=0;i<predict_attr_count;i++)
	 num_knn[i]=0;


	if(Sample==NULL)
	{
		printf("UNABLE TO OPEN FILE\n");
		return 0;	
	}
	
	//scanf("%d",&predict_attr);

		for(i=0;i<predict_attr_count;i++)
        {
		if(Atttr_Seq[predict_attr[i]] == 'r'){
			num_knn[i] = 1;
		}else{
			printf("wrong number, program shutting down\n\n");
			return 0;
		}
	}

	printf("\n\n========What k value do you want to use?========\n\n");
	printf("\nplease enter:");
	//scanf("%d",&k_value);
	
	//predict numeric value

for(i=0;i<predict_attr_count;i++)
	printf("num_knn [%d] = %d\n",i,num_knn[i]);
fp1=fopen("Breast_data_coordinates.dat","w");
fp2=fopen("Prostate_data_coordinates.dat","w");
fp3=fopen("Lung_data_coordinates.dat","w");
fp4=fopen("Colon_data_coordinates.dat","w");
if(fp1==NULL || fp2==NULL || fp3==NULL || fp4==NULL){
	printf("\nError in opening file");
	exit(0);
}
fprintf(fp1,"predicted,actual,cancer_type\n",NULL);
fprintf(fp2,"predicted,actual,cancer_type\n",NULL);
fprintf(fp3,"predicted,actual,cancer_type\n",NULL);
fprintf(fp4,"predicted,actual,cancer_type\n",NULL);

int k,t;
float sum=0;
float  actural[predict_attr_count], result[predict_attr_count];
for(k=0;k<predict_attr_count;k++)
  {

	if(num_knn[k] == 1){
//TRAINING  
		sum=0;
		for(i = 0; i < Sample_Num;i++){

			t = 0;
                        
			while(Sample[t].validated ==1){
				t++;
			};
			Sample[t].validated = 1;
			
			sum += Sample[t].NumericAttributes[predict_attr[k]];
				
				
			}
			for(i = 0; i < Sample_Num;i++)
			{
			   Sample[i].validated = 0;	
			} 	
			actural[k] = sum/Sample_Num;
				


   }

  
}	


double sumB = 0,sumP=0,sumL=0,sumC=0,meanB,meanP,meanL,meanC;
int countB=0,countP=0,countL=0,countC=0,l;
for(l=0;l<predict_attr_count;l++)
	{

           switch(cols1[l][0])
			{
				case 'B':		
					sumB = sumB+actural[l];
					countB++;
					break;
				case 'P':
					sumP = sumP+actural[l];
					countP++;
					break;
				case 'L':
					sumL = sumL+actural[l];
					countL++;
					break;
				case 'C':
					sumC = sumC+actural[l];
					countC++;
					break;
			}




	}

meanB = sumB/countB;
meanP = sumP/countP;
meanL = sumL/countL;
meanC = sumC/countC;
	
					

 //TEST


double sumB1 = 0,sumP1=0,sumL1=0,sumC1=0,accmeanB1,accmeanP1,accmeanL1,accmeanC1,correct_rate=0;
int acccountB=0,acccountP=0,acccountL=0,acccountC=0;
int cancer_type1=1,cancer_type2=2,cancer_type3=3,cancer_type4=4;
FILE *fptr=NULL;
fptr=fopen("Cancer_Mean.dat","w");
if(fptr==NULL){
	printf("\nCannot Open File");
	exit(0);
}
for(k=0;k<predict_attr_count;k++)
  {
        correct=0;
        
	if(num_knn[k] == 1){
	for(i = 0; i < Sample_Num_test;i++){

			t = 0;
                        
			while(Sample_test[t].validated ==1){
				t++;
			};
			Sample_test[t].validated = 1;
			
				
 result[k] = NUM_KNN(t,k_value,predict_attr[k],Sample_test,&Sample_Num_test,&Atttr_Num_test,Atttr_Seq_test,predict_attr_count,actural);
			


			/*	if(absv(actural[k],result[k])/actural[k] < 0.4){
				printf("feature=%d ,Correct Prediction, predict %f actual %f, cancer=%s\n",predict_attr[k],result[k],actural[k],cols1[k]); */
				switch(cols1[k][0])
				{
				case 'B':
					if(absv(meanB,result[k])/meanB < 0.4){		
					  fprintf(fp1,"%f,%f,%s\n",result[k],meanB,cols1[k]);
						correct++;	
                                        }
					
					break;
				case 'P':
					if(absv(meanP,result[k])/meanP < 0.4){	
					  fprintf(fp2,"%f,%f,%s\n",result[k],meanP,cols1[k]);
						correct++;
					}
					break;
				case 'L':
					if(absv(meanL,result[k])/meanL < 0.4){	
					  fprintf(fp3,"%f,%f,%s\n",result[k],meanL,cols1[k]);
						correct++;
					}
					break;
				case 'C':
					if(absv(meanC,result[k])/meanC < 0.4){	
					  fprintf(fp4,"%f,%f,%s\n",result[k],meanC,cols1[k]);
						correct++;
					}
					break;
				}
				
				
				
			}
			// if this value is within 20% of actual
			//then treat it as correct prediction i.e., belongs to the class label given in the training sample
			
			
		}
        correct_rate=(float)correct/Sample_Num_test;
	printf("========Total %d |Correct %d |Correct rate %f |Cancer type %s========\n"
			,Sample_Num_test, correct,correct_rate,cols1[k]);
		

           		switch(cols1[k][0])
			{
				case 'B':		
					sumB1 = sumB1+correct_rate;
					//strcpy(cancer_type1,"Breast Cancer");
					acccountB++;
					break;
				case 'P':
					sumP1 = sumP1+correct_rate;
					//strcpy(cancer_type2,"Prostate Cancer");
					acccountP++;
					break;
				case 'L':
					sumL1 = sumL1+correct_rate;
					//strcpy(cancer_type3,"Lung Cancer");
					acccountL++;
					break;
				case 'C':
					sumC1 = sumC1+correct_rate;
					//strcpy(cancer_type4,"Colon Cancer");
					acccountC++;
					break;
			




		}

accmeanB1 = sumB1/acccountB;
accmeanP1 = sumP1/acccountP;
accmeanL1 = sumL1/acccountL;
accmeanC1 = sumC1/acccountC;
	



        
	/* Invalidate the samples for validating them for next feature */
	
	for(i = 0; i < Sample_Num_test;i++)
	{
	   Sample_test[i].validated = 0;	
	}

   }
printf("========Mean %f\n %f\n %f\n %f\n", accmeanB1,accmeanP1,accmeanL1,accmeanC1);
fprintf(fptr,"%f,%d\n%f,%d\n%f,%d\n%f,%d",accmeanB1,cancer_type1,accmeanP1,cancer_type2,accmeanL1,cancer_type3,accmeanC1,cancer_type4);
fclose(fp1);
fclose(fp2);
fclose(fp3);
fclose(fp4);
fclose(fptr);

	return 0;
}
